<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RainZhao</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-12T12:10:25.583Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>赵宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis 学习</title>
    <link href="http://yoursite.com/2019/02/02/redis-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/02/02/redis-学习/</id>
    <published>2019-02-02T12:18:44.000Z</published>
    <updated>2019-02-12T12:10:25.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><ol><li><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep redis</span><br><span class="line"></span><br><span class="line">netstat -antpl | grep redis</span><br><span class="line"></span><br><span class="line">redis-cli -h ip -p port ping</span><br></pre></td></tr></table></figure></li><li><p>动态参数启动redis<br>redis-server –port 6380</p></li><li><p>创建软连接<br>ln -s redis-3.0.7 redis</p></li></ol><p>编译： make 安装： make install</p><h2 id="redis-hash数据结构"><a href="#redis-hash数据结构" class="headerlink" title="redis hash数据结构"></a>redis hash数据结构</h2><ol><li><p>哈希键值结构</p><img src="/2019/02/02/redis-学习/redis哈希结构.png"></li><li><p>特点<br>filed不能相同，value可以相同</p></li></ol><h3 id="redis-hash-api"><a href="#redis-hash-api" class="headerlink" title="redis hash api"></a>redis hash api</h3><blockquote><p>hget、hset、hdel o(1)<br>哈希命令都以H开头<br>hget key field<br>获取hash key所对应的field的value<br>hset key field value<br>设置hash key对应的field的value<br>hdel key field<br>删除hash key对应field的value</p></blockquote><p><strong> 例子：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">使用hset设置key和field</span><br><span class="line">127.0.0.1:6379&gt; hset user:1:info name zhaoyu</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user:1:info name</span><br><span class="line"><span class="string">"zhaoyu"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1:info</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"zhaoyu"</span></span><br><span class="line">hgetall 获取对应key的所有的属性和值</span><br><span class="line">127.0.0.1:6379&gt; hset user:1:info age 20</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget user:1:info age</span><br><span class="line"><span class="string">"20"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1:info</span><br><span class="line">1) <span class="string">"name"</span></span><br><span class="line">2) <span class="string">"zhaoyu"</span></span><br><span class="line">3) <span class="string">"age"</span></span><br><span class="line">4) <span class="string">"20"</span></span><br><span class="line">使用hdel删除对应的key</span><br><span class="line">127.0.0.1:6379&gt; hdel user:1:info name</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">其中 hdel 删除的时候可以指定多个field一起删除</span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1:info</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br></pre></td></tr></table></figure></p><p><strong>hexists 和 hlen</strong></p><blockquote><p>hexists key field<br>判断hash key 是否有 field<br>hlen key<br>获取hash key field的数量</p></blockquote><p><strong>例子：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">先用hgetall 获取对应key的所有的属性和值</span><br><span class="line">127.0.0.1:6379&gt; hgetall user:1:info</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line">127.0.0.1:6379&gt; hexists user:1:info age</span><br><span class="line">(<span class="built_in">integer</span>) 1 值存在时返回1</span><br><span class="line">127.0.0.1:6379&gt; hexists user:1:info name</span><br><span class="line">(<span class="built_in">integer</span>) 0 值不存在时返回0</span><br><span class="line">127.0.0.1:6379&gt; hlen user:1:info </span><br><span class="line">(<span class="built_in">integer</span>) 1 key的属性的数量为1，目前只有一个属性</span><br></pre></td></tr></table></figure></p><blockquote><p>hmget、hmset<br>hmget key field1 field2… fieldN o(n)<br>批量获取hash key的一批field所对应的值<br>hmset key field1 value1 field2 value2… o(n)<br>批量设置hash key的一批field value </p></blockquote><p><strong>例子：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hmset user:2:info age 20 name zhaoyu sex boy</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hlen user:2:info</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; hmget user:2:info age name sex</span><br><span class="line">1) <span class="string">"20"</span></span><br><span class="line">2) <span class="string">"zhaoyu"</span></span><br><span class="line">3) <span class="string">"boy"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>hgetall key<br>返回hash key对应所有的field和value<br>hvals key<br>获取hash key对应所有的field的value<br>hkeys key<br>获取hash key对应的所有的field</p></blockquote><p><strong>例子：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hkeys user:2:info</span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"name"</span></span><br><span class="line">3) <span class="string">"sex"</span></span><br><span class="line">127.0.0.1:6379&gt; hvals user:2:info</span><br><span class="line">1) <span class="string">"20"</span></span><br><span class="line">2) <span class="string">"zhaoyu"</span></span><br><span class="line">3) <span class="string">"boy"</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall user:2:info </span><br><span class="line">1) <span class="string">"age"</span></span><br><span class="line">2) <span class="string">"20"</span></span><br><span class="line">3) <span class="string">"name"</span></span><br><span class="line">4) <span class="string">"zhaoyu"</span></span><br><span class="line">5) <span class="string">"sex"</span></span><br><span class="line">6) <span class="string">"boy"</span></span><br></pre></td></tr></table></figure></p><p>注意：hgetall如果属性非常多的话，会执行时间较久，时间复杂度o(n),生产环境不建议使用</p><blockquote><p>hsetnx、hincrby、hincrbyfloat o(1)<br>hsetnx key field value<br>设置hash key对应的field的value（如field已存在则失败）<br>hincrby key field intCounter<br>hash key 对应的field的value自增intCounter<br>hincrbyfloat key field floatCounter<br>hincrby 浮点数版</p></blockquote><p>总结：</p><table><thead><tr><th style="text-align:center">命令</th><th style="text-align:center">复杂度</th></tr></thead><tbody><tr><td style="text-align:center">hget hset hdel</td><td style="text-align:center">o(1)</td></tr><tr><td style="text-align:center">hexists</td><td style="text-align:center">o(1)</td></tr><tr><td style="text-align:center">hincrby</td><td style="text-align:center">o(1)</td></tr><tr><td style="text-align:center">hgetall hvals hkeys</td><td style="text-align:center">o(n)</td></tr><tr><td style="text-align:center">hmget hmset</td><td style="text-align:center">o(n)</td></tr></tbody></table><h2 id="redis-list-列表"><a href="#redis-list-列表" class="headerlink" title="redis list 列表"></a>redis list 列表</h2><h3 id="列表数据结构"><a href="#列表数据结构" class="headerlink" title="列表数据结构"></a>列表数据结构</h3><img src="/2019/02/02/redis-学习/redis-list.png"><p>列表的操作有：</p><ol><li>左边添加弹出 lpush、lpop</li><li>右边添加弹出 rpush、rpop</li><li>获取子列表 lrange 2 3</li><li>获取列表长度 llen</li><li>获取列表中的指定元素 lindex 4</li><li>删除列表中指定元素 lrem 1 b </li></ol><p>特点：</p><ol><li>有序 </li><li>可以重复</li><li>左右两边弹出</li></ol><h3 id="列表操作api"><a href="#列表操作api" class="headerlink" title="列表操作api"></a>列表操作api</h3><blockquote><p>rpush key value1 value2 … valueN o(1~n)<br>从列表右端插入值（1-N个）<br>lpush key value1 value2<br>从列表左端插入值（1-N个）</p></blockquote><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush mylist a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"a"</span></span><br><span class="line">2) <span class="string">"b"</span></span><br><span class="line">3) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; lpush mylist 0</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) <span class="string">"a"</span></span><br><span class="line">3) <span class="string">"b"</span></span><br><span class="line">4) <span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; rpop mylist</span><br><span class="line"><span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) <span class="string">"a"</span></span><br><span class="line">3) <span class="string">"b"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>linsert key before | after value newValue o(n)<br>在list指定的值前|后插入newValue</p></blockquote><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">linsert listkey before b java</span><br><span class="line">linsert listkey after b php</span><br></pre></td></tr></table></figure></p><p><strong>删除：</strong></p><blockquote><p>lpop key o(1)<br>从列表左侧弹出一个item<br>rpop key o(1)<br>从列表右侧弹出一个item<br>lrem key count value o(n)<br>根据count值，从列表中删除所有value相等的项<br>(1) count &gt; 0, 从左至右，删除最多count个value相等的项<br>(2) count &lt; 0, 从右到左，删除最多Math.abs(count)个value相等的项<br>(3) count = 0, 删除所有value相等的项</p></blockquote><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpop mylist</span><br><span class="line"><span class="string">"c"</span></span><br><span class="line">127.0.0.1:6379&gt; lrange mylist 0 -1</span><br><span class="line">1) <span class="string">"0"</span></span><br><span class="line">2) <span class="string">"a"</span></span><br></pre></td></tr></table></figure></p><p><strong>修剪列表:</strong></p><blockquote><p>ltrim key start end o(n)<br>按照索引范围修剪列表</p></blockquote><p><strong>获取list列表</strong></p><blockquote><p>lrange key start end (包含end) o(n)<br>获取列表指定索引范围所有的item</p></blockquote><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">取六个item</span><br><span class="line">127.0.0.1:6379&gt; lrange listkey 0 6</span><br><span class="line">1) <span class="string">"c"</span></span><br><span class="line">2) <span class="string">"java"</span></span><br><span class="line">3) <span class="string">"b"</span></span><br><span class="line">4) <span class="string">"php"</span></span><br><span class="line">5) <span class="string">"a"</span></span><br><span class="line">获取整个列表 0 -1</span><br><span class="line">127.0.0.1:6379&gt; lrange listkey 0 -1</span><br><span class="line">1) <span class="string">"c"</span></span><br><span class="line">2) <span class="string">"java"</span></span><br><span class="line">3) <span class="string">"b"</span></span><br><span class="line">4) <span class="string">"php"</span></span><br><span class="line">5) <span class="string">"a"</span></span><br></pre></td></tr></table></figure></p><p><strong>lindex获取指定索引的item</strong></p><blockquote><p>lindex key index<br>获取列表指定索引的item</p></blockquote><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获取第一个item</span><br><span class="line">127.0.0.1:6379&gt; lindex listkey 0</span><br><span class="line"><span class="string">"c"</span></span><br><span class="line">获取最后一个元素</span><br><span class="line">127.0.0.1:6379&gt; lindex listkey -1</span><br><span class="line"><span class="string">"a"</span></span><br></pre></td></tr></table></figure></p><p><strong>llen 获取列表的指定长度</strong></p><blockquote><p>llen ley O(1)<br>获取列表长度</p></blockquote><p><strong>例子：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; llen listkey</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure></p><p><strong>修改list指定索引的item的值</strong></p><blockquote><p>lset key index newValue O(n)<br>设置列表指定索引值为newValue</p></blockquote><p><strong>例子：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lset listkey 0 newval</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange listkey 0 -1</span><br><span class="line">1) <span class="string">"newval"</span></span><br><span class="line">2) <span class="string">"java"</span></span><br><span class="line">3) <span class="string">"b"</span></span><br><span class="line">4) <span class="string">"php"</span></span><br><span class="line">5) <span class="string">"a"</span></span><br></pre></td></tr></table></figure></p><p>列表应用：</p><ol><li>LPUSH + LPOP = stack</li><li>LPUSH + RPOP = Queue</li><li>LPUSH + LTRIM = 可控容量大小的集合</li><li>LPUSH + BRPOP = Message Queue 消息队列</li></ol><h2 id="redis集合Set"><a href="#redis集合Set" class="headerlink" title="redis集合Set"></a>redis集合Set</h2><p><strong>set 数据结构</strong><br><img src="/2019/02/02/redis-学习/redis-set.png"></p><p><strong>特点：</strong><br>无序、无重复元素、集合间操作（交集、并集、全集）</p><p><strong>集合添加或删除</strong></p><blockquote><p>sadd key element O(1)<br>向集合key添加element（如果element已经存在，添加失败，不会抛异常，返回结果为0）<br>srem key element O(1)<br>将集合key中的element移除掉</p></blockquote><p><strong>scard、sismember、srandmember、smembers</strong></p><blockquote><p>scard key计算集合大小<br>sismember key element 判断元素是否在集合中<br>srandmember key count 从集合中随机挑count个元素， 不会破坏集合数据<br>spop key 从集合中随机弹出一个元素<br>smembers 从集合中取出所有的元素（无序）,小心使用，可以使用sscan替代</p></blockquote><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd user:1:follow it news his sports</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; smembers user:1:follow</span><br><span class="line">1) <span class="string">"his"</span></span><br><span class="line">2) <span class="string">"news"</span></span><br><span class="line">3) <span class="string">"sports"</span></span><br><span class="line">4) <span class="string">"it"</span></span><br><span class="line">127.0.0.1:6379&gt; spop user:1:follow </span><br><span class="line"><span class="string">"sports"</span></span><br><span class="line">127.0.0.1:6379&gt; smembers user:1:follow</span><br><span class="line">1) <span class="string">"his"</span></span><br><span class="line">2) <span class="string">"news"</span></span><br><span class="line">3) <span class="string">"it"</span></span><br><span class="line">127.0.0.1:6379&gt; scard user:1:follow</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sismember user:1:follow java</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure></p><p><strong>sdiff、sinter、sunion</strong></p><p>sdiff user:1:follow user:2:follow 差集<br>sinter user:1:follow user:2:follow 交集<br>sunion user:1:follow user:2:follow 并集</p><p>sdiff|sinter|sunion + store destkey 将差集、交集、并集结果保存在destkey中</p><p>tips：<br>SADD = Tagging<br>SPOP/SRANDMEMBER = Random item<br>SADD + SINTER = Social Graph</p><h2 id="redis有序集合zset"><a href="#redis有序集合zset" class="headerlink" title="redis有序集合zset"></a>redis有序集合zset</h2><p><strong>有序集合结构</strong><br><img src="/2019/02/02/redis-学习/redis-zset.png"></p><p><strong>集合VS有序集合</strong></p><table><thead><tr><th style="text-align:center">集合</th><th style="text-align:center">&lt;=&gt;</th><th style="text-align:center">有序集合</th></tr></thead><tbody><tr><td style="text-align:center">无重复元素</td><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">无重复元素</td></tr><tr><td style="text-align:center">无序</td><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">有序</td></tr><tr><td style="text-align:center">element</td><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">element + score</td></tr></tbody></table><p><strong>列表VS有序集合</strong></p><table><thead><tr><th style="text-align:center">集合</th><th style="text-align:center">&lt;=&gt;</th><th style="text-align:center">有序集合</th></tr></thead><tbody><tr><td style="text-align:center">可以有重复元素</td><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">无重复元素</td></tr><tr><td style="text-align:center">有序</td><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">有序</td></tr><tr><td style="text-align:center">element</td><td style="text-align:center">&lt;=&gt;</td><td style="text-align:center">element + score</td></tr></tbody></table><p><strong>zadd添加、删除</strong></p><blockquote><p>zadd key score element(element可以重复) O(logN)<br>添加score和element<br>zrem key element(可以是多个) O(1)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd program 150 GO 145 JAVA 140 NODE 130 javascript 120 php</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; zrem program javascript</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange program 0 -1 withscores</span><br><span class="line">1) <span class="string">"php"</span></span><br><span class="line">2) <span class="string">"120"</span></span><br><span class="line">3) <span class="string">"NODE"</span></span><br><span class="line">4) <span class="string">"140"</span></span><br><span class="line">5) <span class="string">"JAVA"</span></span><br><span class="line">6) <span class="string">"145"</span></span><br><span class="line">7) <span class="string">"GO"</span></span><br><span class="line">8) <span class="string">"150"</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>zscore 获取分数</strong></p><blockquote><p>zscore key element<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore program JAVA</span><br><span class="line"><span class="string">"145"</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>zincrby计数</strong></p><blockquote><p>zincrby key incrScore element O(1)<br>增加或减少元素的分数</p></blockquote><p><strong>返回元素个数</strong></p><blockquote><p>zcard key O(1)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcard program</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>获取范围内的元素</strong></p><blockquote><p>zrange key start end [WITHSCORES] O(log(n)+m)<br>返回指定索引范围内的升序元素[分值]<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange program 0 -1 withscores</span><br><span class="line">1) <span class="string">"php"</span></span><br><span class="line">2) <span class="string">"120"</span></span><br><span class="line">3) <span class="string">"NODE"</span></span><br><span class="line">4) <span class="string">"140"</span></span><br><span class="line">5) <span class="string">"JAVA"</span></span><br><span class="line">6) <span class="string">"145"</span></span><br><span class="line">7) <span class="string">"GO"</span></span><br><span class="line">8) <span class="string">"150"</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>zrangebyscore</strong></p><blockquote><p>zrangebyscore key minScore maxScore[WITHSCORES] O(log(n)+m)<br>返回指定分数范围内的升序元素[分值]<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange program 0 -1 withscores</span><br><span class="line">1) <span class="string">"php"</span></span><br><span class="line">2) <span class="string">"120"</span></span><br><span class="line">3) <span class="string">"NODE"</span></span><br><span class="line">4) <span class="string">"140"</span></span><br><span class="line">5) <span class="string">"JAVA"</span></span><br><span class="line">6) <span class="string">"145"</span></span><br><span class="line">7) <span class="string">"GO"</span></span><br><span class="line">8) <span class="string">"150"</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore program 100 140 withscores</span><br><span class="line">1) <span class="string">"php"</span></span><br><span class="line">2) <span class="string">"120"</span></span><br><span class="line">3) <span class="string">"NODE"</span></span><br><span class="line">4) <span class="string">"140"</span></span><br></pre></td></tr></table></figure></p></blockquote><p><strong>zcount</strong></p><blockquote><p>zount key minScore maxScore O(log(n)+m)<br>返回有序集合内在指定分数范围内的个数</p></blockquote><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount program 120 140</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br></pre></td></tr></table></figure></p><p><strong>zremrangebyrank</strong> </p><blockquote><p>zremrangebyrank key start end O(log(n)+m)<br>删除指定排名内的升序元素</p></blockquote><p>例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zremrangebyrank program 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange program 0 -1</span><br><span class="line">1) <span class="string">"JAVA"</span></span><br><span class="line">2) <span class="string">"GO"</span></span><br></pre></td></tr></table></figure></p><p><strong>zremrangebyscore</strong></p><blockquote><p>zremrangebyscore key minScore maxScore O(log(n)+m)<br>删除指定分数内的升序元素</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;验证&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>postgresql 学习</title>
    <link href="http://yoursite.com/2019/01/30/postgresql-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/01/30/postgresql-学习/</id>
    <published>2019-01-30T03:24:55.000Z</published>
    <updated>2019-01-30T11:39:32.576Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>创建db<br><code>createdb mydb;</code></p></li><li><p>访问数据库<br><code>psql mydb;</code></p></li><li><p>查看语法<br><code>\h</code></p></li><li><p>退出psql<br><code>\q</code></p></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> weather (</span><br><span class="line">    city            <span class="built_in">varchar</span>(<span class="number">80</span>),</span><br><span class="line">    temp_lo         <span class="built_in">int</span>,           <span class="comment">-- 最低温度</span></span><br><span class="line">    temp_hi         <span class="built_in">int</span>,           <span class="comment">-- 最高温度</span></span><br><span class="line">    prcp            <span class="built_in">real</span>,          <span class="comment">-- 湿度</span></span><br><span class="line">    <span class="built_in">date</span>            <span class="built_in">date</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cities (</span><br><span class="line">    <span class="keyword">name</span>            <span class="built_in">varchar</span>(<span class="number">80</span>),</span><br><span class="line">    location        point</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不是简单数字值的常量通常必需用单引号（'）包围</span></span><br></pre></td></tr></table></figure></li><li><p>删除一个表<br><code>DROP TABLE tablename;</code></p></li><li><p>插入一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> weather <span class="keyword">VALUES</span> (<span class="string">'San Francisco'</span>, <span class="number">46</span>, <span class="number">50</span>, <span class="number">0.25</span>, <span class="string">'1994-11-27'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities <span class="keyword">VALUES</span> (<span class="string">'San Francisco'</span>, <span class="string">'(-194.0, 53.0)'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 也可以明确列出哪些列需要插入:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> weather (<span class="built_in">date</span>, city, temp_hi, temp_lo) <span class="keyword">VALUES</span> (<span class="string">'1994-11-29'</span>, <span class="string">'Hayward'</span>, <span class="number">54</span>, <span class="number">37</span>);</span><br></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以在选择列表中写任意表达式，而不仅仅是列的列表</span></span><br><span class="line"><span class="keyword">SELECT</span> city, (temp_hi+temp_lo)/<span class="number">2</span> <span class="keyword">AS</span> temp_avg, <span class="built_in">date</span> <span class="keyword">FROM</span> weather;</span><br><span class="line"><span class="comment">-- AS子句是如何给输出列重新命名的（AS子句是可选的）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一个查询可以使用WHERE子句“修饰”，它指定需要哪些行。WHERE子句包含一个布尔（真值）表达式，只有那些使布尔表达式为真的行才会被返回。在条件中可以使用常用的布尔操作符（AND、OR和NOT）。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather <span class="keyword">WHERE</span> city = <span class="string">'San Francisco'</span> <span class="keyword">AND</span> prcp &gt; <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可以要求返回的查询结果是排好序的</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather <span class="keyword">ORDER</span> <span class="keyword">BY</span> city;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在查询的结果中消除重复的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> city <span class="keyword">FROM</span> weather;</span><br></pre></td></tr></table></figure></li><li><p>表之间的连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather, cities <span class="keyword">WHERE</span> city = <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line">    city      | temp_lo | temp_hi | prcp |    date    |     name      | location</span><br><span class="line"><span class="comment">---------------+---------+---------+------+------------+---------------+-----------</span></span><br><span class="line">San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)</span><br><span class="line">San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定明确的列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> city, temp_lo, temp_hi, prcp, <span class="built_in">date</span>, location <span class="keyword">FROM</span> weather, cities <span class="keyword">WHERE</span> city = <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 指定明确的表，防止重名的列导致查询失败</span></span><br><span class="line"><span class="keyword">SELECT</span> weather.city, weather.temp_lo, weather.temp_hi,</span><br><span class="line">       weather.prcp, weather.date, cities.location</span><br><span class="line">    <span class="keyword">FROM</span> weather, cities</span><br><span class="line">    <span class="keyword">WHERE</span> cities.name = weather.city;</span><br><span class="line"></span><br><span class="line">    city      | temp_lo | temp_hi | prcp |    date    | location  </span><br><span class="line"><span class="comment">---------------+---------+---------+------+------------+-----------</span></span><br><span class="line">San Francisco |      46 |      50 | 0.25 | 1994-11-27 | (-194,53)</span><br><span class="line">San Francisco |      43 |      57 |    0 | 1994-11-29 | (-194,53)</span><br><span class="line"></span><br><span class="line">这样查询出来只会有两个表中name相同的列会被查询出来，</span><br><span class="line">使用左外连接，在连接操作符左部的表中的行在输出中至少要出现一次， 而在右部的表的行只有在能找到匹配的左部表行时才被输出。</span><br><span class="line">如果输出的左部表的行没有对应匹配的右部表的行，那么右部表行的列将填充空值（null）。</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> weather <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> cities <span class="keyword">ON</span> (weather.city = cities.name);</span><br><span class="line">     city      | temp_lo | temp_hi | prcp |    date    |     name      | location  </span><br><span class="line"><span class="comment">---------------+---------+---------+------+------------+---------------+-----------</span></span><br><span class="line"> San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)</span><br><span class="line"> Hayward       |      37 |      54 |      | 1994-11-29 |               | </span><br><span class="line"> San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 右外连接</span></span><br><span class="line">     city      | temp_lo | temp_hi | prcp |    date    |     name      | location  </span><br><span class="line"><span class="comment">---------------+---------+---------+------+------------+---------------+-----------</span></span><br><span class="line"> San Francisco |      43 |      57 |    0 | 1994-11-29 | San Francisco | (-194,53)</span><br><span class="line"> San Francisco |      46 |      50 | 0.25 | 1994-11-27 | San Francisco | (-194,53)</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 自连接</span></span><br><span class="line"><span class="keyword">SELECT</span> W1.city, W1.temp_lo <span class="keyword">AS</span> <span class="keyword">low</span>, W1.temp_hi <span class="keyword">AS</span> <span class="keyword">high</span>,</span><br><span class="line">    W2.city, W2.temp_lo <span class="keyword">AS</span> <span class="keyword">low</span>, W2.temp_hi <span class="keyword">AS</span> <span class="keyword">high</span></span><br><span class="line">    <span class="keyword">FROM</span> weather W1, weather W2</span><br><span class="line">    <span class="keyword">WHERE</span> W1.temp_lo &lt; W2.temp_lo</span><br><span class="line">    <span class="keyword">AND</span> W1.temp_hi &gt; W2.temp_hi;</span><br><span class="line"></span><br><span class="line">    city      | low | high |     city      | low | high</span><br><span class="line"><span class="comment">---------------+-----+------+---------------+-----+------</span></span><br><span class="line">San Francisco |  43 |   57 | San Francisco |  46 |   50</span><br><span class="line">Hayward       |  37 |   54 | San Francisco |  46 |   50</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>连接操作</th><th></th><th>含义</th></tr></thead><tbody><tr><td>内连接 INNER JOIN</td><td></td><td>只连接匹配的行</td></tr><tr><td>左外连接 LEFT OUTER JOIN</td><td></td><td>包含左边表的全部行（不管右边的表中是否存在与它们匹配的行），以及右边表中全部匹配的行</td></tr><tr><td>右外连接 RIGHT OUTER JOIN</td><td></td><td>包含右边表的全部行（不管左边的表中是否存在与它们匹配的行），以及左边表中全部匹配的行</td></tr><tr><td>全外连接 FULL OUTER JOIN</td><td></td><td>包含左、右两个表的全部行，不管另外一边的表中是否存在与它们匹配的行。</td></tr></tbody></table><ol start="10"><li>聚集操作<blockquote><p>聚集max不能被用于WHERE子句中（存在这个限制是因为WHERE子句决定哪些行可以被聚集计算包括；因此显然它必需在聚集函数之前被计算）</p></blockquote></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city <span class="keyword">FROM</span> weather <span class="keyword">WHERE</span> temp_lo = (<span class="keyword">SELECT</span> <span class="keyword">max</span>(temp_lo) <span class="keyword">FROM</span> weather);</span><br></pre></td></tr></table></figure><ol start="11"><li><p>更新操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> weather</span><br><span class="line">    <span class="keyword">SET</span> temp_hi = temp_hi - <span class="number">2</span>,  temp_lo = temp_lo - <span class="number">2</span></span><br><span class="line">    <span class="keyword">WHERE</span> <span class="built_in">date</span> &gt; <span class="string">'1994-11-28'</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> weather <span class="keyword">WHERE</span> city = <span class="string">'Hayward'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- 如果没有where限制就会删除所有行的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tablename;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建db&lt;br&gt;&lt;code&gt;createdb mydb;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问数据库&lt;br&gt;&lt;code&gt;psql mydb;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看语法&lt;br&gt;&lt;code&gt;\h&lt;/code&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习</title>
    <link href="http://yoursite.com/2019/01/30/%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/01/30/学习/</id>
    <published>2019-01-30T03:23:03.000Z</published>
    <updated>2019-01-30T03:23:03.545Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java8 Function how to use</title>
    <link href="http://yoursite.com/2019/01/28/java8-Function-how-to-use/"/>
    <id>http://yoursite.com/2019/01/28/java8-Function-how-to-use/</id>
    <published>2019-01-28T11:57:23.000Z</published>
    <updated>2019-01-28T12:51:20.039Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Function&lt;T,R&gt; 接口，内置的函数接口，其接受两个参数，一个入参T，一个出参R</p></blockquote><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><p>举例：假如一个方法是用来拼接字符串的，需要的入参是String类型的，出参也是String类型的。<br>非java8时你可能会这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">appendStr</span><span class="params">(String oriStr, String appendStr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> oriStr + appendStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用；</span></span><br><span class="line">String result = appendStr(<span class="string">"hello"</span>, <span class="string">" world !"</span>);</span><br></pre></td></tr></table></figure></p><p>从上面可以明确的看出 它的入参和出参都是String，用Function就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">appendStr</span><span class="params">(String oriStr, Function&lt;String, String&gt; strFunction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strFunction.apply(oriStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：</span></span><br><span class="line">String result = appendStr(<span class="string">"hello"</span>, (x) -&gt; x + <span class="string">" world !"</span>);</span><br></pre></td></tr></table></figure><p>上面举了一个比较简单的例子，便于理解Function接口的使用。</p><h3 id="元素是否存在"><a href="#元素是否存在" class="headerlink" title="元素是否存在"></a>元素是否存在</h3><p>举例：查找某一个元素是否在列表中存在</p><p>非java8 时你可能会这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(Collection&lt;T&gt; list, T t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (T t1 : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t1.equals(t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>从上面可以看到，需要传入一个list，和要查询的目标值，这样判断逻辑都在其中，不利于扩展，其实我们只需要知道一个元素是否在这个元素是否在这个list中，在的话返回true，不在的话返回false， 所以我们可以把具体的操作抽象为一个返回值为Boolean的接口，具体的实现由具体的实现类去实现或内部类去实现。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @FunctionalInterface 表名它是一个函数式接口，确保该接口只有一个抽象方法。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(Collection&lt;T&gt; list, Predicate match)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (T t : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (match.test(t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">boolean</span> result1 = exist(list, (x) -&gt; x.equals(<span class="number">30</span>));</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">boolean</span> result2 = exist(list, <span class="keyword">new</span> Predicate() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里的o相当于list遍历时的每个元素</span></span><br><span class="line">        <span class="keyword">return</span> o.equals(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>上面我们已经将判断的部分抽象为了接口，将判断的逻辑放在了传参出，内部只需要知道你的结果是true还是false就足够了，可以看到这个接口需要一个入参为T，返回参数为Boolean，这时Function恰好可以满足，我们就不必自定义函数接口了。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(Collection&lt;T&gt; list, Function&lt;T, Boolean&gt; function)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (T t : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (function.apply(t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用：</span></span><br><span class="line">List&lt;Integer&gt; oriList = Arrays.asList(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>);</span><br><span class="line"><span class="keyword">boolean</span> exist = isExist(oriList, x -&gt; x.equals(<span class="number">30</span>));</span><br></pre></td></tr></table></figure><h3 id="查找list中的某个元素，并返回此元素"><a href="#查找list中的某个元素，并返回此元素" class="headerlink" title="查找list中的某个元素，并返回此元素"></a>查找list中的某个元素，并返回此元素</h3><p><strong>举一反三，如何查询一个元素是否存在于某个list中呢？如果存在的话则返回这个元素</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">findData</span><span class="params">(Collection&lt;T&gt; list, Function&lt;T, Boolean&gt; function)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(list)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (T t : list) &#123;</span><br><span class="line">        <span class="keyword">if</span> (function.apply(t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>Function&lt;T,R&gt; 函数式接口，T代表入参，R代表出参，当你的函数有出参和入参时都可使用此接口，当然java8还提供了许多类似的函数式接口来方便我们的使用，以后再来总结。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Function&amp;lt;T,R&amp;gt; 接口，内置的函数接口，其接受两个参数，一个入参T，一个出参R&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;拼接字符串&quot;&gt;&lt;a href=&quot;#拼接字符串&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java反射</title>
    <link href="http://yoursite.com/2019/01/23/java%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2019/01/23/java反射/</id>
    <published>2019-01-23T13:21:56.000Z</published>
    <updated>2019-01-24T03:13:37.761Z</updated>
    
    <content type="html"><![CDATA[<p>反射使java具有了运行时刻加载类的功能，使java具有了动态加载类的功能。</p><h1 id="Class-类的使用"><a href="#Class-类的使用" class="headerlink" title="Class 类的使用"></a>Class 类的使用</h1><h2 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取类类型的三种方式</span></span><br><span class="line">Class c1 = <span class="keyword">int</span>.class; <span class="comment">// int 类的类类型</span></span><br><span class="line">Class c2 = Class.forName(<span class="string">"类的全称"</span>);</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">Class c3 = a.getClass(); <span class="comment">// 获取a类的类类型</span></span><br></pre></td></tr></table></figure><h2 id="获取类的名称、类的方法"><a href="#获取类的名称、类的方法" class="headerlink" title="获取类的名称、类的方法"></a>获取类的名称、类的方法</h2><blockquote><p>getMethods() 方法获取的是所有的public的函数，包括父类继承而来的方法<br>getDeclaredMethods() 获取的是该类声明的所有方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Class c = Obj.getClass();</span><br><span class="line"><span class="comment">// 类的名称</span></span><br><span class="line">c.getName();</span><br><span class="line"></span><br><span class="line">Method[] ms = c.getMethods();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ms.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取方法的返回值类型的类类型</span></span><br><span class="line">    Class returnType = ms[i].getReturnType();</span><br><span class="line">    <span class="comment">// 方法的返回值类型的名字</span></span><br><span class="line">    returnType.getName();</span><br><span class="line">    <span class="comment">// 得到的方法的名称 </span></span><br><span class="line">    ms[i].getName();</span><br><span class="line">    <span class="comment">//获取方法的参数类型</span></span><br><span class="line">    Class[] parameterTypes = ms[i].getParameterTypes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;反射使java具有了运行时刻加载类的功能，使java具有了动态加载类的功能。&lt;/p&gt;
&lt;h1 id=&quot;Class-类的使用&quot;&gt;&lt;a href=&quot;#Class-类的使用&quot; class=&quot;headerlink&quot; title=&quot;Class 类的使用&quot;&gt;&lt;/a&gt;Class 类的使用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试图片</title>
    <link href="http://yoursite.com/2019/01/23/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/01/23/测试图片/</id>
    <published>2019-01-23T09:46:24.000Z</published>
    <updated>2019-01-23T09:47:47.585Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/01/23/测试图片/favicon.png" title="This is an example image">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/01/23/测试图片/favicon.png&quot; title=&quot;This is an example image&quot;&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java内存模型</title>
    <link href="http://yoursite.com/2019/01/19/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/01/19/java内存模型/</id>
    <published>2019-01-19T12:42:37.000Z</published>
    <updated>2019-01-23T02:37:28.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>java内存模型（Java Memory model , JMM）,</p></blockquote><p>java内存模型规定了一个线程如何和何时可以看到由其他线程修改过后的共享变量的值，以及在必须时如何同步的访问共享变量。 java内存模型中的线程的工作内存，是CPU的寄存器和高速缓存的一个抽象描述。</p><blockquote><p>JVM 内存模型是对内存的物理划分，只局在JVM内存。</p></blockquote><p>VM Stack: Java虚拟机栈，它描述的是java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧用于存储<strong>局部变量表、操作数栈，动态链接，方法出口等信息。</strong><br>其中局部变量表存放了编译器可知的各种基本数据类型（boolean、 byte、char、short、int、float、long、double）、对象引用（句柄）</p><h2 id="Java内存模型-同步八种操作："><a href="#Java内存模型-同步八种操作：" class="headerlink" title="Java内存模型-同步八种操作："></a>Java内存模型-同步八种操作：</h2><ol><li>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。</li><li>unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</li><li>read（读取）：作用于主内存变量，把一个变量值从主内存传输到工作内存中，以便随后的load动作使用。</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</li><li>use（使用）：作用于工作内存变量，它把工作内存中的一个变量值传递给执行引擎。</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值复制给工作内存的变量。</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write操作。</li><li>write（写入）：作用于主内存中的变量，它把store操作从工作内存中的一个变量的值传送到主内存的变量中。</li></ol><h2 id="线程安全性的三个方面："><a href="#线程安全性的三个方面：" class="headerlink" title="线程安全性的三个方面："></a>线程安全性的三个方面：</h2><ol><li>原子性：提供了互斥访问，同一时刻只能有一个线程来对它进行操作。</li><li>可见性：一个线程对主内存的修改可以及时的被其他线程观察到。</li><li>有序性：一个线程观察其他线程中的指令执行顺序，由于指令冲排序的存在，该观察结果一般杂乱无序。</li></ol><h2 id="原子性-Atomic包"><a href="#原子性-Atomic包" class="headerlink" title="原子性 - Atomic包"></a>原子性 - Atomic包</h2><ul><li>AtmoicXXX: CAS、Unsafe.compareAndSwapInt（do while循环来比较工作内存和主内存中的值是否相同，只有相同时才进行累加操作）</li></ul><h2 id="可见性-（synchronized、volatile）"><a href="#可见性-（synchronized、volatile）" class="headerlink" title="可见性 （synchronized、volatile）"></a>可见性 （synchronized、volatile）</h2><p>一个线程对主内存的修改可以及时的被其他线程观察到。</p><ol><li>导致共享变量在线程间不可见的原因：</li><li>线程交叉执行</li><li>重排序结合线程交叉执行。</li><li>共享变量更新后的值没有在工作内存与主内存中间及时更新。</li></ol><p>jvm关于synchronized的两条规定：</p><ol><li>线程解锁前，必须把共享变量的最新值刷新到主内存中。</li><li>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取到最新的值。（加锁与解锁是同一把锁。）</li></ol><p>volatile<br>通过加入<strong>内存屏障和禁止重排序</strong>优化来实现可见性。</p><ul><li>对volatile变量写操作时，会在写操作后加入一条store屏障指令，将本地内存中的共享变量的值刷新到主内存。</li><li>对volatile变量读取操作时，会在读操前加入一条load屏障指令，从主内存中读取共享变量。<br>volatile不具有原子性。</li></ul><h3 id="正确使用-volatile-变量的条件"><a href="#正确使用-volatile-变量的条件" class="headerlink" title="正确使用 volatile 变量的条件"></a>正确使用 volatile 变量的条件</h3><p>要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：</p><p>对变量的写操作不依赖于当前值。<br>该变量没有包含在具有其他变量的不变式中。</p><p>适合用于状态标识量<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> inited = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程1</span></span><br><span class="line">context = loadContext();</span><br><span class="line">inited = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程2</span></span><br><span class="line"><span class="keyword">while</span>(!inited) &#123;</span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br><span class="line">doSomething(context);</span><br></pre></td></tr></table></figure></p><h2 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h2><p>volatile、 synchronized、Lock、happens-before原则都可保证有序性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;java内存模型（Java Memory model , JMM）,&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;java内存模型规定了一个线程如何和何时可以看到由其他线程修改过后的共享变量的值，以及在必须时如何同步的访问共享变量。 java内存模型
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sychronized学习</title>
    <link href="http://yoursite.com/2019/01/19/sychronized%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/01/19/sychronized学习/</id>
    <published>2019-01-19T05:12:54.000Z</published>
    <updated>2019-01-19T06:42:47.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><ol><li>修饰代码块：大括号括起来的代码，作用于调用的对象。</li><li>修饰方法：整个方法，作用于调用的对象。</li><li>修饰静态方法：整个静态方法，作用于所有对象。</li><li>修饰类：括号括起来的部分，作用于所有对象。</li></ol><h2 id="修饰代码块"><a href="#修饰代码块" class="headerlink" title="修饰代码块"></a>修饰代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">synchronizedTest1</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String s = String.format(<span class="string">"test1 - %s: %s"</span>, type, i);</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedExample synchronizedExample = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            synchronizedExample.synchronizedTest1(<span class="string">"type1"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            synchronizedExample.synchronizedTest1(<span class="string">"type2"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 输出结果：对于同步代码块，作用于同一个对象，会顺序的执行，</span></span><br><span class="line">等待另一个线程执行完毕才可以执行</span><br><span class="line">test1 - type1: <span class="number">0</span></span><br><span class="line">test1 - type1: <span class="number">1</span></span><br><span class="line">test1 - type1: <span class="number">2</span></span><br><span class="line">test1 - type1: <span class="number">3</span></span><br><span class="line">test1 - type1: <span class="number">4</span></span><br><span class="line">test1 - type1: <span class="number">5</span></span><br><span class="line">test1 - type1: <span class="number">6</span></span><br><span class="line">test1 - type1: <span class="number">7</span></span><br><span class="line">test1 - type1: <span class="number">8</span></span><br><span class="line">test1 - type1: <span class="number">9</span></span><br><span class="line">test1 - type2: <span class="number">0</span></span><br><span class="line">test1 - type2: <span class="number">1</span></span><br><span class="line">test1 - type2: <span class="number">2</span></span><br><span class="line">test1 - type2: <span class="number">3</span></span><br><span class="line">test1 - type2: <span class="number">4</span></span><br><span class="line">test1 - type2: <span class="number">5</span></span><br><span class="line">test1 - type2: <span class="number">6</span></span><br><span class="line">test1 - type2: <span class="number">7</span></span><br><span class="line">test1 - type2: <span class="number">8</span></span><br><span class="line">test1 - type2: <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedTest2</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String s = String.format(<span class="string">"test1 - %s: %s"</span>, type, i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedExample synchronizedExample = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            synchronizedExample.synchronizedTest2(<span class="string">"type1"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            synchronizedExample.synchronizedTest2(<span class="string">"type2"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>synchronized 关键字修饰代码块或方法都是作用于当前调用的对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample synchronizedExample1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    SynchronizedExample synchronizedExample2 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line"></span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        synchronizedExample1.synchronizedTest1(<span class="string">"type1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        synchronizedExample2.synchronizedTest1(<span class="string">"type2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果：对于同步代码快，作用于不同的对象，执行时是互相不影响的。</span></span><br><span class="line">test1 - type1: <span class="number">0</span></span><br><span class="line">test1 - type2: <span class="number">0</span></span><br><span class="line">test1 - type1: <span class="number">1</span></span><br><span class="line">test1 - type2: <span class="number">1</span></span><br><span class="line">test1 - type1: <span class="number">2</span></span><br><span class="line">test1 - type2: <span class="number">2</span></span><br><span class="line">test1 - type1: <span class="number">3</span></span><br><span class="line">test1 - type2: <span class="number">3</span></span><br><span class="line">test1 - type1: <span class="number">4</span></span><br><span class="line">test1 - type2: <span class="number">4</span></span><br><span class="line">test1 - type1: <span class="number">5</span></span><br><span class="line">test1 - type2: <span class="number">5</span></span><br><span class="line">test1 - type1: <span class="number">6</span></span><br><span class="line">test1 - type1: <span class="number">7</span></span><br><span class="line">test1 - type2: <span class="number">6</span></span><br><span class="line">test1 - type1: <span class="number">8</span></span><br><span class="line">test1 - type2: <span class="number">7</span></span><br><span class="line">test1 - type1: <span class="number">9</span></span><br><span class="line">test1 - type2: <span class="number">8</span></span><br><span class="line">test1 - type2: <span class="number">9</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>当同步代码块修饰的时是一个方法中的所有的方法时是等同于修饰这个方法的。</li><li>子类继承父类时无法继承父类方法的synchronized关键字。</li></ol></blockquote><h2 id="synchronized修饰静态方法"><a href="#synchronized修饰静态方法" class="headerlink" title="synchronized修饰静态方法"></a>synchronized修饰静态方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">synchronizedTest1</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        String s = String.format(<span class="string">"test1 - %s: %s"</span>, type, i);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronizedExample synchronizedExample1 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line">    SynchronizedExample synchronizedExample2 = <span class="keyword">new</span> SynchronizedExample();</span><br><span class="line"></span><br><span class="line">    ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        synchronizedExample1.synchronizedTest1(<span class="string">"type1"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    executorService.execute(() -&gt; &#123;</span><br><span class="line">        synchronizedExample2.synchronizedTest1(<span class="string">"type2"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果： synchronized修饰静态方法的时候时作用于整个类的，即：使用不同的对象，但只要他们同属于一个synchronized类，就会同一个时间只会有一个线程在执行</span></span><br><span class="line"></span><br><span class="line">test1 - type1: <span class="number">0</span></span><br><span class="line">test1 - type1: <span class="number">1</span></span><br><span class="line">test1 - type1: <span class="number">2</span></span><br><span class="line">test1 - type1: <span class="number">3</span></span><br><span class="line">test1 - type1: <span class="number">4</span></span><br><span class="line">test1 - type1: <span class="number">5</span></span><br><span class="line">test1 - type1: <span class="number">6</span></span><br><span class="line">test1 - type1: <span class="number">7</span></span><br><span class="line">test1 - type1: <span class="number">8</span></span><br><span class="line">test1 - type1: <span class="number">9</span></span><br><span class="line">test1 - type2: <span class="number">0</span></span><br><span class="line">test1 - type2: <span class="number">1</span></span><br><span class="line">test1 - type2: <span class="number">2</span></span><br><span class="line">test1 - type2: <span class="number">3</span></span><br><span class="line">test1 - type2: <span class="number">4</span></span><br><span class="line">test1 - type2: <span class="number">5</span></span><br><span class="line">test1 - type2: <span class="number">6</span></span><br><span class="line">test1 - type2: <span class="number">7</span></span><br><span class="line">test1 - type2: <span class="number">8</span></span><br><span class="line">test1 - type2: <span class="number">9</span></span><br></pre></td></tr></table></figure><h2 id="synchronized修饰类"><a href="#synchronized修饰类" class="headerlink" title="synchronized修饰类"></a>synchronized修饰类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//synchronized修饰类和修饰静态方法一样，都会作用于整个类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">synchronizedTest1</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (SynchronizedExample.class) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String s = String.format(<span class="string">"test1 - %s: %s"</span>, type, i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>synchronized: 是不可中断锁，适合竞争不激烈，可读性好。<br>LOCK：可中断锁，多样化同步，竞争激烈时能维持常态。<br>Atomic：竞争激烈时能维持常态，比Lock性能好；只能同步一个值。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;synchronized&quot;&gt;&lt;a href=&quot;#synchronized&quot; class=&quot;headerlink&quot; title=&quot;synchronized&quot;&gt;&lt;/a&gt;synchronized&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;修饰代码块：大括号括起来的代码，作用于调用的对象
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java性能调优</title>
    <link href="http://yoursite.com/2019/01/16/java%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
    <id>http://yoursite.com/2019/01/16/java性能调优/</id>
    <published>2019-01-16T06:16:55.000Z</published>
    <updated>2019-01-16T06:20:22.509Z</updated>
    
    <content type="html"><![CDATA[<h3 id="jvm参数"><a href="#jvm参数" class="headerlink" title="jvm参数"></a>jvm参数</h3><p>-Xms等价于-XX:InitialHeapSize<br>-Xmx等价于-XX:MaxHeapSize<br>-XX:MetaspaceSize=32M -XX:MaxMetaspaceSize=32M</p><p>查看JVM运行时参数：<br>jps: 查看java进程<br>jps -l: 查看完全类名</p><p>jinfo -flag MaxHeapSize pid(java进程pid)  : java进程设置的最大内存<br>jinfo -flags pid  : 查看手动赋值过的参数</p><h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat:"></a>jstat:</h3><p>jstat -class 9259r<br>Loaded  Bytes  Unloaded  Bytes     Time<br> 17141   31432.3       32    48.6      24.84<br>loaded 加载的类的个数<br>unloaded 卸载的</p><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><blockquote><p>gc 、-gcutil、-gccause、-gcnew、-gcold</p></blockquote><p>jstat -gc pid 1000 3 : </p><p>jstat -gc pid 1000 3<br> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<br>7552.0 7552.0  0.0   3140.8 60416.0   5824.5   150948.0   108001.5  89600.0 86713.5 11776.0 11173.3    519    3.519   7      1.107    4.626</p><p>S0C、S1C、S0U、S1U、：S0和S1的总量与使用量。<br>EC、EU：Eden区总量与使用量。<br>OC、OU：Old区总量与使用量。<br>MC、MU：MetaSpace区总量与使用量。<br>CCSC、CCSU：压缩类空间总量与使用量。<br>YGC、YGCT: YoungGC的次数与时间。<br>FGC、FGCT: FullGC的次数与时间。<br>GCT：总的GC时间</p><h2 id="JIT编译"><a href="#JIT编译" class="headerlink" title="JIT编译"></a>JIT编译</h2><p>jstat -compiler pid</p><h2 id="导出内存映像文件"><a href="#导出内存映像文件" class="headerlink" title="导出内存映像文件"></a>导出内存映像文件</h2><p>内存溢出自动导出：<br>-XX:+HeapDumpOnOutOfMemoryError<br>-XX:HeapDumpPath=./<br>使用jmap命令手动导出：<br>jmap -dump:format=b,file=heap.hprof pid</p><h2 id="jstack死循环与死锁"><a href="#jstack死循环与死锁" class="headerlink" title="jstack死循环与死锁"></a>jstack死循环与死锁</h2><p>线程的几种状态：<br>NEW： 线程还未启动<br>RUNNABLE ：线程已经运行。<br>BLOCKED：等待锁<br>WAITING: 等待另一个线程做一些操作。<br>TIMED_WAITING:<br>TERMINATED: 线程已经退出</p><h2 id="死循环导致CPU飙高"><a href="#死循环导致CPU飙高" class="headerlink" title="死循环导致CPU飙高"></a>死循环导致CPU飙高</h2><p>mvn clean package -Dmaven.test.skip<br>jstak pid &gt; text.txt<br>top<br>top -p pid -H<br>printf  “%x” pid 转换为16进制 根据此16进制的值，去堆栈文件中去查询此值<br><img src="https://upload-images.jianshu.io/upload_images/5899859-a4e241b475ad9923.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;jvm参数&quot;&gt;&lt;a href=&quot;#jvm参数&quot; class=&quot;headerlink&quot; title=&quot;jvm参数&quot;&gt;&lt;/a&gt;jvm参数&lt;/h3&gt;&lt;p&gt;-Xms等价于-XX:InitialHeapSize&lt;br&gt;-Xmx等价于-XX:MaxHeapSize&lt;br&gt;-X
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java中Comparator的使用</title>
    <link href="http://yoursite.com/2019/01/16/Java%E4%B8%ADComparator%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/01/16/Java中Comparator的使用/</id>
    <published>2019-01-16T06:03:55.000Z</published>
    <updated>2019-01-16T06:04:23.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Comparable与Comparator的区别"><a href="#Comparable与Comparator的区别" class="headerlink" title="Comparable与Comparator的区别"></a>Comparable与Comparator的区别</h3><p><code>Comparable &amp; Comparator</code>都是用来实现集合中元素的比较、排序的，只是 Comparable 是在集合内部定义的方法实现的排序，<code>Comparator</code> 是在集合外部实现的排序，所以，如想实现排序，就需要在集合外定义<code>Comparator</code>接口的方法或在集合内实现 <code>Comparable</code>接口的方法，<code>Comparator</code>位于包java.util下，而<code>Comparable</code>位于包java.lang下。</p><p>Java中有两种方式来提供比较功能。第一种是实现java.lang.Comparable接口，使你的类天生具有比较的能力，此接口很简单，只有一个<code>compareTo</code>一个方法。此方法接收另一个Object为参数，如果当前对象小于参数则返回负值，如果相等则返回零，否则返回正值，也就是：<br><strong>x.compareTo(y) 来“比较x和y的大小”。若返回“负数”，意味着“x比y小”；返回“零”，意味着“x等于y”；返回“正数”，意味着“x大于y”。</strong></p><p>使用Comparable比较的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> name.compareTo(person.name);</span><br><span class="line">          <span class="comment">//return this.name - person.name;</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">ArrayList&lt;Person&gt; list = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"><span class="comment">// 添加对象到ArrayList中</span></span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"aaa"</span>, <span class="number">10</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"bbb"</span>, <span class="number">20</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"ccc"</span>, <span class="number">30</span>));</span><br><span class="line">list.add(<span class="keyword">new</span> Person(<span class="string">"ddd"</span>, <span class="number">40</span>));</span><br><span class="line">Collections.sort(list); <span class="comment">//这里会自动调用Person中重写的compareTo方法。</span></span><br></pre></td></tr></table></figure></p><p>使用Comparator比较的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Person&gt; people = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Joe"</span>, <span class="number">24</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Pete"</span>, <span class="number">18</span>),</span><br><span class="line">                <span class="keyword">new</span> Person(<span class="string">"Chris"</span>, <span class="number">21</span>)</span><br><span class="line">        );</span><br><span class="line">        Collections.sort(people, <span class="keyword">new</span> LexicographicComparator());</span><br><span class="line">        System.out.println(people);</span><br><span class="line">        <span class="comment">//[&#123;name=Chris, age=21&#125;, &#123;name=Joe, age=24&#125;, &#123;name=Pete, age=18&#125;]</span></span><br><span class="line">        Collections.sort(people, <span class="keyword">new</span> Comparator&lt;Person&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person a, Person b)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"> <span class="keyword">return</span> a.age &lt; b.age ? -<span class="number">1</span> : a.age == b.age ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">        System.out.println(people);</span><br><span class="line">        <span class="comment">//[&#123;name=Pete, age=18&#125;, &#123;name=Chris, age=21&#125;, &#123;name=Joe, age=24&#125;]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LexicographicComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person a, Person b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.name.compareToIgnoreCase(b.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    Person(String n, <span class="keyword">int</span> a) &#123;</span><br><span class="line">        name = n;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"&#123;name=%s, age=%d&#125;"</span>, name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过两种方式去实现自定义排序：<br>第一种:<br>定义一个类去实现<code>Comparator</code>接口，重写其中的<code>compare</code>方法。<br>第二种：<br>其实只是语法不同，在内部就<code>new</code>这个接口并重写里面的<code>compare</code>方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Comparable与Comparator的区别&quot;&gt;&lt;a href=&quot;#Comparable与Comparator的区别&quot; class=&quot;headerlink&quot; title=&quot;Comparable与Comparator的区别&quot;&gt;&lt;/a&gt;Comparable与Com
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用fastjson将json字符串转换为Map</title>
    <link href="http://yoursite.com/2019/01/16/%E4%BD%BF%E7%94%A8fastjson%E5%B0%86json%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BAMap/"/>
    <id>http://yoursite.com/2019/01/16/使用fastjson将json字符串转换为Map/</id>
    <published>2019-01-16T05:49:27.000Z</published>
    <updated>2019-01-16T05:56:11.044Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>###JSON.parseObject将json数据转换为map结构的数据</p></blockquote><h3 id="1-构建转换的实体"><a href="#1-构建转换的实体" class="headerlink" title="1.构建转换的实体"></a>1.构建转换的实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameEntity</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">//空的构造函数必须要有，具体原因可以百度下</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="title">String</span> <span class="title">name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-要转换的json数据"><a href="#2-要转换的json数据" class="headerlink" title="2. 要转换的json数据"></a>2. 要转换的json数据</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"test1"</span>:&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"zhangsan"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"test2"</span>:&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"lisi"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"test3"</span>:&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"wanger"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-使用fastjson进行转换"><a href="#3-使用fastjson进行转换" class="headerlink" title="3. 使用fastjson进行转换"></a>3. 使用fastjson进行转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str =  <span class="string">"&#123;\"test1\":&#123;\"name\":\"zhangsan\"&#125;,\"test2\":&#123;\"name\":\"lisi\"&#125;,\"test3\":&#123;\"name\":\"wanger\"&#125;&#125;"</span>;</span><br><span class="line"></span><br><span class="line">HashMap&lt;String,NameEntity&gt; nameMap = </span><br><span class="line">JSON.parseObject(str,<span class="keyword">new</span> TypeReference&lt;HashMap&lt;String,NameEntity&gt;&gt;() &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中Map中key为String类型，value为 NameEntity类型的实体</span></span><br></pre></td></tr></table></figure><h3 id="结语："><a href="#结语：" class="headerlink" title="结语："></a>结语：</h3><h5 id="经过转换，我们就得到了Map形式的数据，其中一条数据：key-为test1-value-为-zhangsan。"><a href="#经过转换，我们就得到了Map形式的数据，其中一条数据：key-为test1-value-为-zhangsan。" class="headerlink" title="经过转换，我们就得到了Map形式的数据，其中一条数据：key 为test1, value 为 zhangsan。"></a>经过转换，我们就得到了Map形式的数据，其中一条数据：key 为test1, value 为 zhangsan。</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;###JSON.parseObject将json数据转换为map结构的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-构建转换的实体&quot;&gt;&lt;a href=&quot;#1-构建转换的实体&quot; class=&quot;headerlink&quot; title=&quot;1.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java中将list转换为array</title>
    <link href="http://yoursite.com/2019/01/16/My-New-Post/"/>
    <id>http://yoursite.com/2019/01/16/My-New-Post/</id>
    <published>2019-01-16T02:58:50.000Z</published>
    <updated>2019-01-16T05:45:35.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-List-toArray"><a href="#1-List-toArray" class="headerlink" title="1. List.toArray()"></a>1. List.toArray()</h1><blockquote><p>java8中的hotspot会自己计算数组大小，不必指定数组的大小。<br>例如：<code>String[] array = list.toArray(new String[0]);</code><br>而不必写为：<code>String[] array = list.toArray(new String[list.size()]);</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>);</span><br><span class="line">String[] array = list.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h1 id="2-List-stream"><a href="#2-List-stream" class="headerlink" title="2. List.stream()"></a>2. List.stream()</h1><blockquote><p>java8 可以采用如下写法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>);</span><br><span class="line">String[] array = list.stream().toArray(String[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="3-google-guava-库"><a href="#3-google-guava-库" class="headerlink" title="3. google guava 库"></a>3. google guava 库</h1><blockquote><p>建议使用java api 而不是下面此种方法</p></blockquote><p>##3.1 使用FluentIterable类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>);</span><br><span class="line">String[] array = FluentIterable.from(list).toArray(String.class);</span><br></pre></td></tr></table></figure></p><p>##3.2 使用Iterables类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>);</span><br><span class="line">String[] array = Iterables.toArray(list, String.class);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-List-toArray&quot;&gt;&lt;a href=&quot;#1-List-toArray&quot; class=&quot;headerlink&quot; title=&quot;1. List.toArray()&quot;&gt;&lt;/a&gt;1. List.toArray()&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;jav
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/01/15/hello-world/"/>
    <id>http://yoursite.com/2019/01/15/hello-world/</id>
    <published>2019-01-15T12:13:13.532Z</published>
    <updated>2019-01-15T12:13:13.533Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
